"
a base class for generating cmake files.
Mainly provides a helper methods of cmake commands api.
"
Class {
	#name : #CMakeGenerator,
	#superclass : #Object,
	#instVars : [
		'output'
	],
	#category : #CMakeVMMaker
}

{ #category : #'cmake commands' }
CMakeGenerator >> addDefinitions: aString [
	^ self cmd: 'add_definitions' params: aString
]

{ #category : #'sources management' }
CMakeGenerator >> addSource: aFileName [

	^ self addSources: { aFileName }
]

{ #category : #'sources management' }
CMakeGenerator >> addSources: aFileNames [

	^ self addSources: aFileNames prefixed: ''
]

{ #category : #'sources management' }
CMakeGenerator >> addSources: aFileNames prefixed: aPrefix [

	| names |
	names := aFileNames inject: '' into: [:res :each | res , ' "' , aPrefix, each, '"' ].
	
	self puts: 'list(APPEND sources ', names , ')'
]

{ #category : #'cmake commands' }
CMakeGenerator >> addSubdirectory: aDir [

	^ self cmd: 'add_subdirectory' qparams: aDir. 

]

{ #category : #'as yet unclassified' }
CMakeGenerator >> buildDir [
	^ self config buildDir ifNil: [
		(self topDir / 'build') assureExistence ].
]

{ #category : #'cmake commands' }
CMakeGenerator >> cmd: cmdName params: aString [

	output nextPutAll: cmdName;
		nextPut: $(;
		nextPutAll: aString;
		nextPut: $);
		cr

]

{ #category : #'cmake commands' }
CMakeGenerator >> cmd: cmdName qparams: aString [
	"quoted params"
	output nextPutAll: cmdName;
		nextPutAll: '("';
		nextPutAll: aString;
		nextPutAll: '")';
		cr

]

{ #category : #'as yet unclassified' }
CMakeGenerator >> generate [
	self subclassResponsibility.
]

{ #category : #'as yet unclassified' }
CMakeGenerator >> ifMac: aBlock [
 	^ self config ifMac: aBlock
]

{ #category : #'cmake commands' }
CMakeGenerator >> includeDirectories: aString [
	^ self cmd: 'include_directories' params: aString
]

{ #category : #'cmake commands' }
CMakeGenerator >> message: aString [
	
	self cmd: 'message' qparams: aString.
]

{ #category : #'as yet unclassified' }
CMakeGenerator >> outputFileName [
	^ 'CMakeLists.txt'
]

{ #category : #'as yet unclassified' }
CMakeGenerator >> printHeader [
	
	self puts: '# This is automatically generated file using ', self class name, ' on ',
		Date current asString, ' ' , Time current asString;
		puts: 'cmake_minimum_required(VERSION 2.6.2)';
		puts: 'include(CMakeDetermineSystem)'.
]

{ #category : #'cmake commands' }
CMakeGenerator >> project: aProjectName [
	self cmd: 'project' qparams: aProjectName

]

{ #category : #'as yet unclassified' }
CMakeGenerator >> puts: aString [
	output nextPutAll: aString; cr
]

{ #category : #'cmake commands' }
CMakeGenerator >> set: variableName to: aValueString [

	self cmd: 'set' params: variableName , ' ' , aValueString
]

{ #category : #'cmake commands' }
CMakeGenerator >> set: variableName toString: aValueString [

	^ self set: variableName to: '"', (aValueString copyReplaceAll: '"' with: '\"'), '"'
]
