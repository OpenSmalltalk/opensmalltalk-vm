"Here are some doits to get Slang to generate a single method to the transcript"CCodeGenerator classPool at: #BreakBlock put: nil.CCodeGenerator classPool at: #BreakBlock put: [:action :ss| action == #transform and: [ss == #setMethod:]].[Transcript show: [| sel vmm cg str |	sel := #prepareForSnapshot.	vmm := (VMMaker forPlatform: 'Cross')				interpreterClass: "CoInterpreterPrimitives"StackInterpreterPrimitives;				options: #(ObjectMemory Spur32BitMemoryManager MULTIPLEBYTECODESETS true).	cg := [vmm buildCodeGeneratorForInterpreter]			on: Notification			do: [:ex|				ex tag == #getVMMaker					ifTrue: [ex resume: vmm]					ifFalse: [ex pass]].	"cg	breakBlock: [:action :ss :dm :cm| action == #inline and: [ss == #frameMethod: and: [dm selector == sel and: [cm getNodeInto: [:node| Transcript cr; print: node; space; print: node parent; flush. node parent isSend and: [node parent selector == #setMethod:]]]]]]."	"cg	breakBlock: [:action :ss :dm| #transform == action and: [dm selector == sel]]."	cg	breakBlock: [:action :ss :dm :cm| action == #transform and: [dm selector == sel]].	"cg	breakBlock: [:action :ss :dm| (#(inline inlineTest) includes: action) and: [(#(numSlotsOf: numSlotsForBytes: noInlineAllocateSlots:) includes: ss) and: [(cg isComplete: ss) and: [(cg currentNode parentChainAnySatisfy: [:node| node isSend and: [(node methodIn: cg) notNil and: [(node methodIn: cg) neverInline]]]) and: [dm selector == sel]]]]]."	cg vmClass preGenerationHook: cg.	cg inferTypesForImplicitlyTypedVariablesAndMethods.	cg retainMethods: { sel }.	cg prepareMethods.	(cg isIncludedInInterpretCase: sel)		ifTrue: [cg doBasicInlining: true]		ifFalse: [cg doInlining: vmm doInlining].	str := ReadWriteStream on: String new.	(cg methodNamed: sel)		halt;		"emitCFunctionPrototype: str generator: cg;"		emitCCodeOn: str generator: cg.	str contents] value].CCodeGenerator classPool at: #BreakBlock put: [:action :ss| action == #create and: [ss == #maybeInlinePositive32BitIntegerFor:]].[Transcript show: [| sel vmm cg str |	sel := #primitiveFloatAt.	vmm := (VMMaker forPlatform: 'Cross')				interpreterClass: StackInterpreterPrimitives;				options: #(ObjectMemory NewObjectMemory).	cg := [vmm buildCodeGeneratorForInterpreter]			on: Notification			do: [:ex|				ex tag == #getVMMaker					ifTrue: [ex resume: vmm]					ifFalse: [ex pass]].	"cg	breakBlock: [:action :ss :dm :cm| action == #inline and: [ss == #frameMethod: and: [dm selector == sel and: [cm getNodeInto: [:node| Transcript cr; print: node; space; print: node parent; flush. node parent isSend and: [node parent selector == #setMethod:]]]]]]."	"cg	breakBlock: [:action :ss :dm| #transform == action and: [dm selector == sel]]."	cg	breakBlock: [:action :ss :dm :cm| action == #transform and: [dm selector == sel]].	"cg	breakBlock: [:action :ss :dm| (#(inline inlineTest) includes: action) and: [(#(numSlotsOf: numSlotsForBytes: noInlineAllocateSlots:) includes: ss) and: [(cg isComplete: ss) and: [(cg currentNode parentChainAnySatisfy: [:node| node isSend and: [(node methodIn: cg) notNil and: [(node methodIn: cg) neverInline]]]) and: [dm selector == sel]]]]]."	cg vmClass preGenerationHook: cg.	cg inferTypesForImplicitlyTypedVariablesAndMethods.	cg retainMethods: { sel }.	cg prepareMethods.	(cg isIncludedInInterpretCase: sel)		ifTrue: [cg doBasicInlining: true]		ifFalse: [cg doInlining: vmm doInlining].	str := ReadWriteStream on: String new.	(cg methodNamed: sel)		halt;		"emitCFunctionPrototype: str generator: cg;"		emitCCodeOn: str generator: cg.	str contents] value].CCodeGenerator classPool at: #BreakBlock put: nil.CCodeGenerator classPool at: #BreakBlock put: [:action :ss| action == #"create"transform and: [ss == #initializeSharableLiteral:]].[Transcript show: [| sel vmm s cg |	sel := #ensureAllContextsHaveBytecodePCsIf:.	vmm := (VMMaker forPlatform: 'Cross')				interpreterClass: CoInterpreter;				options: #(COGMTVM true ObjectMemory Spur64BitCoMemoryManager 				MULTIPLEBYTECODESETS true), {#Cogit. Cogit chooseCogitClass name}.	cg := [vmm buildCodeGeneratorForInterpreter]			on: Notification			do: [:ex|				ex tag == #getVMMaker					ifTrue: [ex resume: vmm]					ifFalse: [ex pass]].	cg breakBlock: [:a :ss :dm| (#(tryToInline) includes: a) and: [(cg methodNamed: #allObjectsDo:) inline == #always and: [dm selector == sel]]].	cg vmClass preGenerationHook: cg.	cg inferTypesForImplicitlyTypedVariablesAndMethods.	cg retainMethods: { sel }.	cg prepareMethods.	(cg isIncludedInInterpretCase: sel)		ifTrue: [cg doBasicInlining: true]		ifFalse: [cg doInlining: vmm doInlining].	s := ReadWriteStream on: String new.	(cg methodNamed: sel)		halt;		emitCCodeOn: s generator: cg.	s contents] value].CCodeGenerator classPool at: #BreakBlock put: nil.CCodeGenerator classPool at: #BreakBlock put: [:action :sel| action == #create and: [sel == #genStoreCheckTrampoline]].[Transcript show: [| sel s vmm cg |	sel := #compileInterpreterPrimitive:flags:.	vmm := VMMaker forPlatform: 'Cross'.	cg := [vmm				interpreterClass: CoInterpreter;				options: {#Cogit. Cogit chooseCogitClass name}, {#ISA. Cogit choose64BitISA}, #(ObjectMemory Spur64BitCoMemoryManager MULTIPLEBYTECODESETS true);				buildCodeGeneratorForCogit]			on: Notification			do: [:ex|				ex tag == #getVMMaker					ifTrue: [ex resume: vmm]					ifFalse: [ex pass]].	cg breakBlock: [:a :ss :m| (#(inline "inlineTest") includes: a) and: [(#(inlineCacheTagsAreIndexes MoveMw:r:R: hasLinkRegister wordSize) includes: ss) and: [m selector == sel]]].	cg breakBlock: [:a :ss :m| #inline == a and: [m selector == sel]].	"cg breakBlock: [:a :ss :m| a == #transform and: [ss == #value: and: [m selector == sel]]]."	cg vmClass preGenerationHook: cg.	cg inferTypesForImplicitlyTypedVariablesAndMethods.	cg retainMethods: { #compactCogCompiledCode. sel }.	cg prepareMethods.	cg doInlining: cg vmClass doInlining.	s := ReadWriteStream on: String new.	(cg methodNamed: sel)		halt;		emitCCodeOn: s generator: cg.	s contents] value].CCodeGenerator classPool at: #BreakBlock put: nil.CCodeGenerator classPool at: #BreakBlock put: [:action :sel| action == #create and: [sel == #genMarshallNArgs:arg:arg:arg:arg:]].[Transcript show: [| sel s vmm cg |	sel := #genCheckForProfileTimerTick:.	vmm := VMMaker forPlatform: 'Cross'.	cg := [vmm				interpreterClass: CoInterpreter;				options: {#Cogit. Cogit chooseCogitClass name}, {#ISA. Cogit choose32BitISA}, ((UIManager default confirm: 'Spur?') ifTrue: [#(ObjectMemory Spur64BitCoMemoryManager MULTIPLEBYTECODESETS true)] ifFalse: [#(ObjectMemory NewCoObjectMemory)]);				buildCodeGeneratorForCogit]			on: Notification			do: [:ex|				ex tag == #getVMMaker					ifTrue: [ex resume: vmm]					ifFalse: [ex pass]].	"cg breakBlock: [:a :ss :m| (#(inline inlineTest) includes: a) and: [ss == #preferredRegisterForMovePerfCnt64RL and: [m selector == sel]]]."	"cg breakBlock: [:a :ss :m| a == #transform and: [m selector == sel]]."	cg vmClass preGenerationHook: cg.	cg inferTypesForImplicitlyTypedVariablesAndMethods.	cg retainMethods: { #compactCogCompiledCode. sel }.	cg prepareMethods.	cg doInlining: cg vmClass doInlining.	s := ReadWriteStream on: String new.	(cg methodNamed: sel)		halt;		emitCCodeOn: s generator: cg.	s contents] value].[Transcript show: [| tm s vmm cg |	vmm := VMMaker forPlatform: 'Cross'.	cg := [vmm				interpreterClass: StackInterpreter;				buildCodeGeneratorForInterpreter]			on: Notification			do: [:ex|				ex tag == #getVMMaker					ifTrue: [ex resume: vmm]					ifFalse: [ex pass]].	cg vmClass preGenerationHook: cg.	tm := (StackInterpreter compile: 'foo self cppIf: ''ARBITRARY'' ifTrue: [self cCode: ''arbi''] ifFalse: [self cCode: ''trary'']. self cppIf: (self cCode: ''ARBITRARY'') ifTrue: [self cCode: ''arbi''] ifFalse: [self cCode: ''trary'']' classified: nil notifying: nil trailer: CompiledMethodTrailer empty ifFail: []) node asTranslationMethodOfClass: cg translationMethodClass.	cg addMethod: tm.	cg inferTypesForImplicitlyTypedVariablesAndMethods.	cg retainMethods: { #foo }.	cg prepareMethods.	cg doInlining: vmm doInlining.	s := ReadWriteStream on: String new.	(cg methodNamed: #foo)		halt;		emitCCodeOn: s generator: cg.	s contents] value].[Transcript show: [| plugin sel s vmm cg |	plugin := IA32ABIPlugin.	sel := #primAddressField.	vmm := VMMaker forPlatform: 'Cross'.	cg := [plugin buildCodeGeneratorInto:[:theCG|											 theCG breakBlock:												[:action :ss :dm|												action == #inline and: [ss == #positiveMachineIntegerFor: and: (theCG isComplete: ss) and: [dm selector == sel]]]]]			on: Notification			do: [:ex|				ex tag == #getVMMaker					ifTrue: [ex resume: vmm]					ifFalse: [ex pass]].	cg	breakSrcInlineSelector: #cdigitMontgomery:len:times:len:modulo:len:mInvModB:into:;		breakDestInlineSelector: sel;		breakOnInline: "false"true.	cg inferTypesForImplicitlyTypedVariablesAndMethods.	cg retainMethods: { sel }.	cg prepareMethods.	cg doInlining: vmm doInlining.	s := ReadWriteStream on: String new.	(cg anyMethodNamed: sel)		emitCCodeOn: s generator: cg.	s contents] value].[| cg sel |sel := #primitiveSocketAbortConnection.cg := SocketPlugin buildCodeGeneratorInto: [:theCG| theCG breakBlock:															[:action :ss :dm| action == #inline and: [ss == #socketValueOf: and: [dm selector == sel]]]].cg inferTypesForImplicitlyTypedVariablesAndMethods.cg retainMethods: { sel }.cg doInlining: true.Transcript show:	(String streamContents:		[:s|		(cg methodNamed: sel)			halt;			emitCCodeOn: s generator: cg])]	on: TMethodValidationNotification	do: [:ex| ex halt].[| cg sel |sel := #ffiCalloutTo:SpecOnStack:in:.cg := ThreadedARM64FFIPlugin buildCodeGeneratorInto: [:theCG| theCG breakBlock: [:action :ss :dm| action == #create and: [ss == #ffiArgByValue:in:]]].cg inferTypesForImplicitlyTypedVariablesAndMethods.cg doInlining: true.Transcript show:	(String streamContents:		[:s|		(cg methodNamed: sel)			halt;			emitCCodeOn: s generator: cg])]	on: TMethodValidationNotification	do: [:ex| ex halt].