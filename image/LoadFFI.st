| manifest load |manifest := #(	('http://source.squeak.org/FFI'					1	('FFI-Pools' 'FFI-Kernel' 'FFI-MacOS' 'FFI-Unix' 'FFI-Win32' 'FFI-Tests'))				('http://www.squeaksource.com/Alien'			0	('Alien-Core' 'Alien-Tests-Core' 'Alien-Win32'))				).load := (manifest collect:				[:tuple|				[:path :order :packages| | repository |				repository := MCHttpRepository								location: path								user: 'squeak'								password: 'squeak'.				MCRepositoryGroup default addRepository: repository.				{repository. order. packages}] valueWithArguments: tuple])			sort: [:a :b| a second <= b second].load do:	[:tuple|	 [:repository :order :packages|	  packages do:		[:package | | packageVersions latestVersion |		"We need to filter-out branches of unbranched packages, but can't assume		the package list is (reverse) ordered."		packageVersions := ((repository versionNamesForPackageNamed: package)			select: [:versionName| (versionName at: package size + 1) = $-])			asSortedCollection: [ :a :b | a versionNumber < b versionNumber ].		latestVersion := packageVersions last.		[| version |		version := ((MCCacheRepository default includesVersionNamed: latestVersion)					ifTrue: [MCCacheRepository default]					ifFalse: [repository]) versionNamed: latestVersion.		 version load.		 version workingCopy repositoryGroup addRepository: repository]			on: Warning			do: [:ex|				((ex messageText beginsWith: 'This package depends on the following classes')				 or: [ex messageText beginsWith: 'About to serialize an empty diffy version.']) ifFalse:					[ex pass].				ex resume]]]		valueWithArguments: tuple].Smalltalk snapshot: true andQuit: true