#!/usr/bin/gawk -f
#
# Rewrite the interpreter source in $1 to use GNU C extensions, writing the
# modified file to stdout.  Author: Ian.Piumarta@inria.fr
#
# Last Edited: Mon Aug  4 18:16:28 PDT 2008 by Eliot Miranda on mcstalker
# Last edited: Wed Dec 16 01:46:39 1998 by piumarta (Ian Piumarta) on clotho

BEGIN {
  print "/* This file has been post-processed for GNU C */\n\
\n\
";
  print "copying first section of file" > "/dev/stderr";
  stage= 0;
}

/#include "sq.h"/ {
  print "#include \"sqGnu.h\"\n";
  next;
}

# A prototype for internalPush means the interprer was not inlined

/^internalPush\(/ \
{
  print "" > "/dev/stderr";
  print "*** interpreter was not inlined: bailing out! ***" > "/dev/stderr";
  print "" > "/dev/stderr";
  exit 1;
}


(stage == 0) && /^interpret\(void\) \{/ {
  print "interpret: adding static register assignments" > "/dev/stderr";
  stage= 1;
  print;
  next;
}

(stage == 1) && /^    char\* localIP;/ {
  print "    register char* localIP IP_REG;";
  next;
}

(stage == 1) && /^    char\* localSP;/ {
  print "    register char* localSP SP_REG;";
  next;
}

(stage == 1) && /^    sqInt currentBytecode;/ {
# print "    register unsigned char currentBytecode CB_REG;" */
  print "    register sqInt currentBytecode CB_REG;";
  next;
}

(stage == 1) && /^$/ {
  print "interpret: adding bytecode dispatch table" > "/dev/stderr";
  print "    BC_JUMP_TABLE;\n";
  print "interpret: rewriting case labels and outer breaks" > "/dev/stderr";
  stage= 2;
  FS="[ 	:]+";
  next;
}

#(stage == 2) && /^		switch \(currentBytecode\) {/ {
#  print "#ifdef PROFILE"
#  print "		bytecodeJumpTable = jumpTable;"
#  print "#endif"
#  print;
#  next;
#}

(stage == 2) && /^		case 207/ {
  print "		BC_CASE(" 207 ")";
  stage= 3;
  next;
}

(stage == 2) && /^		case / {
  print "		BC_CASE(" $3 ")";
  next;
}

(stage == 2) && /^			break;/ {
  print "			BC_BREAK;";
  next;
}

(stage == 3) && /^			break;/ {
  print "			BC_BREAK;";
  next;
}

# sendLiteralSelectorBytecode inlining
(stage == 3) && /^		case / {
  print "		BC_CASE(" $3 ")";
  next;
}


(stage == 3) && /^\}/ {
  stage= 4;
  print;
  next;
}

#(stage == 4) && /^primitiveResponse\(/ {
#  print;
#  print "primitiveResponse: adding primitive dispatch table" > "/dev/stderr";
#  print "    PRIM_TABLE;\n";
#  print "primitiveResponse: rewriting case labels" > "/dev/stderr";
#  stage= 5;
#  FS="[ 	:]+";
#  next;
#}


#(stage == 5) && /^	switch \(primitiveIndex\) {/ {
#  print "primitiveResponse: adding primitive dispatch" > "/dev/stderr";
#  print "	PRIM_DISPATCH;";
#  print;
#  next;
#}

#(stage == 5) && /^		startProfiling\(\);/ {
#  print "#ifdef PROFILE"
#  print "		primitiveJumpTable = jumpTable;"
#  print "#endif"
#  print;
#  next;
#}

(stage == 5) && /^	case / {
  print "	PRIM_CASE(" $3 ")";
  next;
}

(stage == 5) && /^		break;/ {
  print "		PRIM_BREAK;";
  next;
}


(stage == 5) && /^\}/ {
  print "copying last section of file" > "/dev/stderr";
  stage= 6;
  FS=" ";
  print;
  next;
}

# default
{
  print;
  next;
}
